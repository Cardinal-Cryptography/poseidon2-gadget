//! The Poseidon algebraic hash function.

use std::convert::TryInto;
use std::fmt;
use std::iter;
use std::marker::PhantomData;

use ff::FromUniformBytes;
use ff::PrimeField;
use halo2_proofs::arithmetic::Field;

pub(crate) mod fp;
pub(crate) mod fq;
pub(crate) mod grain;
pub(crate) mod mds;

#[cfg(test)]
pub(crate) mod test_vectors;

mod p128pow5t3;
use halo2curves::bn256::Fr;
pub use p128pow5t3::P128Pow5T3;

use grain::SboxType;

/// The type used to hold permutation state.
pub(crate) type State<F, const T: usize> = [F; T];

/// The type used to hold sponge rate.
pub(crate) type SpongeRate<F, const RATE: usize> = [Option<F>; RATE];

/// The type used to hold the MDS matrix and its inverse.
pub type Mds<F, const T: usize> = [[F; T]; T];

/// A specification for a Poseidon permutation.
pub trait Spec<F: Field, const T: usize, const RATE: usize>: fmt::Debug {
    /// The number of full rounds for this specification.
    ///
    /// This must be an even number.
    fn full_rounds() -> usize;

    /// The number of partial rounds for this specification.
    fn partial_rounds() -> usize;

    /// The S-box for this specification.
    fn sbox(val: F) -> F;

    /// Side-loaded index of the first correct and secure MDS that will be generated by
    /// the reference implementation.
    ///
    /// This is used by the default implementation of [`Spec::constants`]. If you are
    /// hard-coding the constants, you may leave this unimplemented.
    fn secure_mds() -> usize;

    /// Generates `(round_constants, mds, mds^-1)` corresponding to this specification.
    fn constants() -> (Vec<[F; T]>, Mds<F, T>, Mds<F, T>);
}

/// Generates `(round_constants, mds, mds^-1)` corresponding to this specification.
pub fn generate_constants<
    F: FromUniformBytes<64> + Ord,
    S: Spec<F, T, RATE>,
    const T: usize,
    const RATE: usize,
>() -> (Vec<[F; T]>, Mds<F, T>, Mds<F, T>) {
    let r_f = S::full_rounds();
    let r_p = S::partial_rounds();

    let f = |mut a: Vec<u8>| {
        a.reverse();
        a.extend([0; 32]);
        a
    };

    let rc3: Vec<Vec<F>> = vec![
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("1d066a255517b7fd8bddd3a93f7804ef7f8fcde48bb4c37a59a09a1a97052816")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("29daefb55f6f2dc6ac3f089cebcc6120b7c6fef31367b68eb7238547d32c1610")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("1f2cb1624a78ee001ecbd88ad959d7012572d76f08ec5c4f9e8b7ad7b0b4e1d1")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("0aad2e79f15735f2bd77c0ed3d14aa27b11f092a53bbc6e1db0672ded84f31e5")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("2252624f8617738cd6f661dd4094375f37028a98f1dece66091ccf1595b43f28")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("1a24913a928b38485a65a84a291da1ff91c20626524b2b87d49f4f2c9018d735")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("22fc468f1759b74d7bfc427b5f11ebb10a41515ddff497b14fd6dae1508fc47a")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("1059ca787f1f89ed9cd026e9c9ca107ae61956ff0b4121d5efd65515617f6e4d")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("02be9473358461d8f61f3536d877de982123011f0bf6f155a45cbbfae8b981ce")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("0ec96c8e32962d462778a749c82ed623aba9b669ac5b8736a1ff3a441a5084a4")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("292f906e073677405442d9553c45fa3f5a47a7cdb8c99f9648fb2e4d814df57e")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("274982444157b86726c11b9a0f5e39a5cc611160a394ea460c63f0b2ffe5657e")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("1a1d063e54b1e764b63e1855bff015b8cedd192f47308731499573f23597d4b5")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("26abc66f3fdf8e68839d10956259063708235dccc1aa3793b91b002c5b257c37")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("0c7c64a9d887385381a578cfed5aed370754427aabca92a70b3c2b12ff4d7be8")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("1cf5998769e9fab79e17f0b6d08b2d1eba2ebac30dc386b0edd383831354b495")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("0f5e3a8566be31b7564ca60461e9e08b19828764a9669bc17aba0b97e66b0109")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("18df6a9d19ea90d895e60e4db0794a01f359a53a180b7d4b42bf3d7a531c976e")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("04f7bf2c5c0538ac6e4b782c3c6e601ad0ea1d3a3b9d25ef4e324055fa3123dc")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("29c76ce22255206e3c40058523748531e770c0584aa2328ce55d54628b89ebe6")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("198d425a45b78e85c053659ab4347f5d65b1b8e9c6108dbe00e0e945dbc5ff15")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("25ee27ab6296cd5e6af3cc79c598a1daa7ff7f6878b3c49d49d3a9a90c3fdf74")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("138ea8e0af41a1e024561001c0b6eb1505845d7d0c55b1b2c0f88687a96d1381")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("306197fb3fab671ef6e7c2cba2eefd0e42851b5b9811f2ca4013370a01d95687")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("1a0c7d52dc32a4432b66f0b4894d4f1a21db7565e5b4250486419eaf00e8f620")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("2b46b418de80915f3ff86a8e5c8bdfccebfbe5f55163cd6caa52997da2c54a9f")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("12d3e0dc0085873701f8b777b9673af9613a1af5db48e05bfb46e312b5829f64")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("263390cf74dc3a8870f5002ed21d089ffb2bf768230f648dba338a5cb19b3a1f")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("0a14f33a5fe668a60ac884b4ca607ad0f8abb5af40f96f1d7d543db52b003dcd")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("28ead9c586513eab1a5e86509d68b2da27be3a4f01171a1dd847df829bc683b9")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("1c6ab1c328c3c6430972031f1bdb2ac9888f0ea1abe71cffea16cda6e1a7416c")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("1fc7e71bc0b819792b2500239f7f8de04f6decd608cb98a932346015c5b42c94")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("03e107eb3a42b2ece380e0d860298f17c0c1e197c952650ee6dd85b93a0ddaa8")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("2d354a251f381a4669c0d52bf88b772c46452ca57c08697f454505f6941d78cd")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("094af88ab05d94baf687ef14bc566d1c522551d61606eda3d14b4606826f794b")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("19705b783bf3d2dc19bcaeabf02f8ca5e1ab5b6f2e3195a9d52b2d249d1396f7")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("09bf4acc3a8bce3f1fcc33fee54fc5b28723b16b7d740a3e60cef6852271200e")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("1803f8200db6013c50f83c0c8fab62843413732f301f7058543a073f3f3b5e4e")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("0f80afb5046244de30595b160b8d1f38bf6fb02d4454c0add41f7fef2faf3e5c")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("126ee1f8504f15c3d77f0088c1cfc964abcfcf643f4a6fea7dc3f98219529d78")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("23c203d10cfcc60f69bfb3d919552ca10ffb4ee63175ddf8ef86f991d7d0a591")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("2a2ae15d8b143709ec0d09705fa3a6303dec1ee4eec2cf747c5a339f7744fb94")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("07b60dee586ed6ef47e5c381ab6343ecc3d3b3006cb461bbb6b5d89081970b2b")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("27316b559be3edfd885d95c494c1ae3d8a98a320baa7d152132cfe583c9311bd")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("1d5c49ba157c32b8d8937cb2d3f84311ef834cc2a743ed662f5f9af0c0342e76")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("2f8b124e78163b2f332774e0b850b5ec09c01bf6979938f67c24bd5940968488")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("1e6843a5457416b6dc5b7aa09a9ce21b1d4cba6554e51d84665f75260113b3d5")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("11cdf00a35f650c55fca25c9929c8ad9a68daf9ac6a189ab1f5bc79f21641d4b")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("21632de3d3bbc5e42ef36e588158d6d4608b2815c77355b7e82b5b9b7eb560bc")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("0de625758452efbd97b27025fbd245e0255ae48ef2a329e449d7b5c51c18498a")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("2ad253c053e75213e2febfd4d976cc01dd9e1e1c6f0fb6b09b09546ba0838098")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("1d6b169ed63872dc6ec7681ec39b3be93dd49cdd13c813b7d35702e38d60b077")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("1660b740a143664bb9127c4941b67fed0be3ea70a24d5568c3a54e706cfef7fe")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("0065a92d1de81f34114f4ca2deef76e0ceacdddb12cf879096a29f10376ccbfe")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("1f11f065202535987367f823da7d672c353ebe2ccbc4869bcf30d50a5871040d")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("26596f5c5dd5a5d1b437ce7b14a2c3dd3bd1d1a39b6759ba110852d17df0693e")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("16f49bc727e45a2f7bf3056efcf8b6d38539c4163a5f1e706743db15af91860f")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("1abe1deb45b3e3119954175efb331bf4568feaf7ea8b3dc5e1a4e7438dd39e5f")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("0e426ccab66984d1d8993a74ca548b779f5db92aaec5f102020d34aea15fba59")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("0e7c30c2e2e8957f4933bd1942053f1f0071684b902d534fa841924303f6a6c6")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("0812a017ca92cf0a1622708fc7edff1d6166ded6e3528ead4c76e1f31d3fc69d")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("21a5ade3df2bc1b5bba949d1db96040068afe5026edd7a9c2e276b47cf010d54")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("01f3035463816c84ad711bf1a058c6c6bd101945f50e5afe72b1a5233f8749ce")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("0b115572f038c0e2028c2aafc2d06a5e8bf2f9398dbd0fdf4dcaa82b0f0c1c8b")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("1c38ec0b99b62fd4f0ef255543f50d2e27fc24db42bc910a3460613b6ef59e2f")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("1c89c6d9666272e8425c3ff1f4ac737b2f5d314606a297d4b1d0b254d880c53e")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("03326e643580356bf6d44008ae4c042a21ad4880097a5eb38b71e2311bb88f8f")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("268076b0054fb73f67cee9ea0e51e3ad50f27a6434b5dceb5bdde2299910a4c9")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0000000000000000000000000000000000000000000000000000000000000000")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("1acd63c67fbc9ab1626ed93491bda32e5da18ea9d8e4f10178d04aa6f8747ad0")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("19f8a5d670e8ab66c4e3144be58ef6901bf93375e2323ec3ca8c86cd2a28b5a5")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("1c0dc443519ad7a86efa40d2df10a011068193ea51f6c92ae1cfbb5f7b9b6893")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("14b39e7aa4068dbe50fe7190e421dc19fbeab33cb4f6a2c4180e4c3224987d3d")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("1d449b71bd826ec58f28c63ea6c561b7b820fc519f01f021afb1e35e28b0795e")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("1ea2c9a89baaddbb60fa97fe60fe9d8e89de141689d1252276524dc0a9e987fc")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("0478d66d43535a8cb57e9c1c3d6a2bd7591f9a46a0e9c058134d5cefdb3c7ff1")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("19272db71eece6a6f608f3b2717f9cd2662e26ad86c400b21cde5e4a7b00bebe")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("14226537335cab33c749c746f09208abb2dd1bd66a87ef75039be846af134166")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
        vec![
            F::from_uniform_bytes(
                &f(
                    hex::decode("01fd6af15956294f9dfe38c0d976a088b21c21e4a1c2e823f912f44961f9a9ce")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("18e5abedd626ec307bca190b8b2cab1aaee2e62ed229ba5a5ad8518d4e5f2a57")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
            F::from_uniform_bytes(
                &f(
                    hex::decode("0fc1bbceba0590f5abbdffa6d3b35e3297c021a3a409926d0e2d54dc1c84fda6")
                        .unwrap(),
                )
                .try_into()
                .unwrap(),
            ),
        ],
    ];

    let round_constants = rc3
        .iter()
        .map(|rc| rc.clone().try_into().unwrap())
        .collect::<Vec<[F; T]>>();

    let mut mds_full = [[F::ONE; T]; T];
    let mut mds_partial = [[F::ONE; T]; T];

    for i in 0..T {
        for j in 0..T {
            match (i, j) {
                (0, 0) => {
                    mds_full[i][j] = F::from_u128(1);
                    mds_partial[i][j] = F::from_u128(1);
                }
                (1, 1) => {
                    mds_full[i][j] = F::from_u128(1);
                    mds_partial[i][j] = F::from_u128(1);
                }
                (2, 2) => {
                    mds_full[i][j] = F::from_u128(1);
                    mds_partial[i][j] = F::from_u128(2);
                }
                (_, _) => {}
            };
        }
    }

    (round_constants, mds_full, mds_partial)
}

/// Runs the Poseidon permutation on the given state.
pub(crate) fn permute<F: Field, S: Spec<F, T, RATE>, const T: usize, const RATE: usize>(
    state: &mut State<F, T>,
    mds_full: &Mds<F, T>,
    mds_part: &Mds<F, T>,
    round_constants: &[[F; T]],
) {
    let r_f = S::full_rounds() / 2;
    let r_p = S::partial_rounds();

    let apply_mds_full = |state: &mut State<F, T>| {
        let mut new_state = [F::ZERO; T];
        // Matrix multiplication
        #[allow(clippy::needless_range_loop)]
        for i in 0..T {
            for j in 0..T {
                if i == j {
                    new_state[i] += (mds_full[i][j] + F::ONE) * state[j];
                } else {
                    new_state[i] += mds_full[i][j] * state[j];
                }
            }
        }
        *state = new_state;
    };

    let apply_mds_part = |state: &mut State<F, T>| {
        let mut new_state = [F::ZERO; T];
        // Matrix multiplication
        #[allow(clippy::needless_range_loop)]
        for i in 0..T {
            for j in 0..T {
                if i == j {
                    new_state[i] += (mds_part[i][j] + F::ONE) * state[j];
                } else {
                    new_state[i] += mds_part[i][j] * state[j];
                }
            }
        }
        *state = new_state;
    };

    apply_mds_full(state);

    let full_round = |state: &mut State<F, T>, rcs: &[F; T]| {
        for (word, rc) in state.iter_mut().zip(rcs.iter()) {
            *word = S::sbox(*word + rc);
        }
        apply_mds_full(state);
    };

    let part_round = |state: &mut State<F, T>, rcs: &[F; T]| {
        for (word, rc) in state.iter_mut().zip(rcs.iter()) {
            *word += rc;
        }
        // In a partial round, the S-box is only applied to the first state word.
        state[0] = S::sbox(state[0]);
        apply_mds_part(state);
    };

    iter::empty()
        .chain(iter::repeat(&full_round as &dyn Fn(&mut State<F, T>, &[F; T])).take(r_f))
        .chain(iter::repeat(&part_round as &dyn Fn(&mut State<F, T>, &[F; T])).take(r_p))
        .chain(iter::repeat(&full_round as &dyn Fn(&mut State<F, T>, &[F; T])).take(r_f))
        .zip(round_constants.iter())
        .fold(state, |state, (round, rcs)| {
            round(state, rcs);
            state
        });
}

fn poseidon_sponge<F: Field, S: Spec<F, T, RATE>, const T: usize, const RATE: usize>(
    state: &mut State<F, T>,
    input: Option<&Absorbing<F, RATE>>,
    mds_matrix_full: &Mds<F, T>,
    mds_matrix_part: &Mds<F, T>,
    round_constants: &[[F; T]],
) -> Squeezing<F, RATE> {
    if let Some(Absorbing(input)) = input {
        // `Iterator::zip` short-circuits when one iterator completes, so this will only
        // mutate the rate portion of the state.
        for (word, value) in state.iter_mut().zip(input.iter()) {
            *word += value.expect("poseidon_sponge is called with a padded input");
        }
    }

    permute::<F, S, T, RATE>(state, mds_matrix_full, mds_matrix_part, round_constants);

    let mut output = [None; RATE];
    for (word, value) in output.iter_mut().zip(state.iter()) {
        *word = Some(*value);
    }
    Squeezing(output)
}

mod private {
    pub trait SealedSpongeMode {}
    impl<F, const RATE: usize> SealedSpongeMode for super::Absorbing<F, RATE> {}
    impl<F, const RATE: usize> SealedSpongeMode for super::Squeezing<F, RATE> {}
}

/// The state of the `Sponge`.
pub trait SpongeMode: private::SealedSpongeMode {}

/// The absorbing state of the `Sponge`.
#[derive(Debug, Clone)]
pub struct Absorbing<F, const RATE: usize>(pub(crate) SpongeRate<F, RATE>);

/// The squeezing state of the `Sponge`.
#[derive(Debug)]
pub struct Squeezing<F, const RATE: usize>(pub(crate) SpongeRate<F, RATE>);

impl<F, const RATE: usize> SpongeMode for Absorbing<F, RATE> {}
impl<F, const RATE: usize> SpongeMode for Squeezing<F, RATE> {}

impl<F: fmt::Debug, const RATE: usize> Absorbing<F, RATE> {
    pub(crate) fn init_with(val: F) -> Self {
        Self(
            iter::once(Some(val))
                .chain((1..RATE).map(|_| None))
                .collect::<Vec<_>>()
                .try_into()
                .unwrap(),
        )
    }
}

#[derive(Clone)]
/// A Poseidon sponge.
pub(crate) struct Sponge<
    F: Field,
    S: Spec<F, T, RATE>,
    M: SpongeMode,
    const T: usize,
    const RATE: usize,
> {
    mode: M,
    state: State<F, T>,
    mds_matrix_full: Mds<F, T>,
    mds_matrix_part: Mds<F, T>,
    round_constants: Vec<[F; T]>,
    _marker: PhantomData<S>,
}

impl<F: Field, S: Spec<F, T, RATE>, const T: usize, const RATE: usize>
    Sponge<F, S, Absorbing<F, RATE>, T, RATE>
{
    /// Constructs a new sponge for the given Poseidon specification.
    pub(crate) fn new(initial_capacity_element: F) -> Self {
        let (round_constants, mds_matrix_full, mds_matrix_part) = S::constants();

        let mode = Absorbing([None; RATE]);
        let mut state = [F::ZERO; T];
        state[RATE] = initial_capacity_element;

        Sponge {
            mode,
            state,
            mds_matrix_full,
            mds_matrix_part,
            round_constants,
            _marker: PhantomData,
        }
    }

    /// Absorbs an element into the sponge.
    pub(crate) fn absorb(&mut self, value: F) {
        for entry in self.mode.0.iter_mut() {
            if entry.is_none() {
                *entry = Some(value);
                return;
            }
        }

        // We've already absorbed as many elements as we can
        let _ = poseidon_sponge::<F, S, T, RATE>(
            &mut self.state,
            Some(&self.mode),
            &self.mds_matrix_full,
            &self.mds_matrix_part,
            &self.round_constants,
        );
        self.mode = Absorbing::init_with(value);
    }

    /// Transitions the sponge into its squeezing state.
    pub(crate) fn finish_absorbing(mut self) -> Sponge<F, S, Squeezing<F, RATE>, T, RATE> {
        let mode = poseidon_sponge::<F, S, T, RATE>(
            &mut self.state,
            Some(&self.mode),
            &self.mds_matrix_full,
            &self.mds_matrix_part,
            &self.round_constants,
        );

        Sponge {
            mode,
            state: self.state,
            mds_matrix_full: self.mds_matrix_full,
            mds_matrix_part: self.mds_matrix_part,
            round_constants: self.round_constants,
            _marker: PhantomData,
        }
    }
}

impl<F: Field, S: Spec<F, T, RATE>, const T: usize, const RATE: usize>
    Sponge<F, S, Squeezing<F, RATE>, T, RATE>
{
    /// Squeezes an element from the sponge.
    pub(crate) fn squeeze(&mut self) -> F {
        loop {
            for entry in self.mode.0.iter_mut() {
                if let Some(e) = entry.take() {
                    return e;
                }
            }

            // We've already squeezed out all available elements
            self.mode = poseidon_sponge::<F, S, T, RATE>(
                &mut self.state,
                None,
                &self.mds_matrix_full,
                &self.mds_matrix_part,
                &self.round_constants,
            );
        }
    }
}

/// A domain in which a Poseidon hash function is being used.
pub trait Domain<F: Field, const RATE: usize> {
    /// Iterator that outputs padding field elements.
    type Padding: IntoIterator<Item = F>;

    /// The name of this domain, for debug formatting purposes.
    fn name() -> String;

    /// The initial capacity element, encoding this domain.
    fn initial_capacity_element() -> F;

    /// Returns the padding to be appended to the input.
    fn padding(input_len: usize) -> Self::Padding;
}

/// A Poseidon hash function used with constant input length.
///
/// Domain specified in [ePrint 2019/458 section 4.2](https://eprint.iacr.org/2019/458.pdf).
#[derive(Clone, Copy, Debug)]
pub struct ConstantLength<const L: usize>;

impl<F: PrimeField, const RATE: usize, const L: usize> Domain<F, RATE> for ConstantLength<L> {
    type Padding = iter::Take<iter::Repeat<F>>;

    fn name() -> String {
        format!("ConstantLength<{L}>")
    }

    fn initial_capacity_element() -> F {
        // Capacity value is $length \cdot 2^64 + (o-1)$ where o is the output length.
        // We hard-code an output length of 1.
        F::from_u128((L as u128) << 64)
    }

    fn padding(input_len: usize) -> Self::Padding {
        assert_eq!(input_len, L);
        // For constant-input-length hashing, we pad the input with zeroes to a multiple
        // of RATE. On its own this would not be sponge-compliant padding, but the
        // Poseidon authors encode the constant length into the capacity element, ensuring
        // that inputs of different lengths do not share the same permutation.
        let k = (L + RATE - 1) / RATE;
        iter::repeat(F::ZERO).take(k * RATE - L)
    }
}

#[derive(Clone)]
/// A Poseidon hash function, built around a sponge.
pub struct Hash<
    F: Field,
    S: Spec<F, T, RATE>,
    D: Domain<F, RATE>,
    const T: usize,
    const RATE: usize,
> {
    sponge: Sponge<F, S, Absorbing<F, RATE>, T, RATE>,
    _domain: PhantomData<D>,
}

impl<F: Field, S: Spec<F, T, RATE>, D: Domain<F, RATE>, const T: usize, const RATE: usize>
    fmt::Debug for Hash<F, S, D, T, RATE>
{
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("Hash")
            .field("width", &T)
            .field("rate", &RATE)
            .field("R_F", &S::full_rounds())
            .field("R_P", &S::partial_rounds())
            .field("domain", &D::name())
            .finish()
    }
}

impl<F: Field, S: Spec<F, T, RATE>, D: Domain<F, RATE>, const T: usize, const RATE: usize>
    Hash<F, S, D, T, RATE>
{
    /// Initializes a new hasher.
    pub fn init() -> Self {
        Hash {
            sponge: Sponge::new(D::initial_capacity_element()),
            _domain: PhantomData,
        }
    }
}

impl<F: PrimeField, S: Spec<F, T, RATE>, const T: usize, const RATE: usize, const L: usize>
    Hash<F, S, ConstantLength<L>, T, RATE>
{
    /// Hashes the given input.
    pub fn hash(mut self, message: [F; L]) -> F {
        for value in message
            .into_iter()
            .chain(<ConstantLength<L> as Domain<F, RATE>>::padding(L))
        {
            self.sponge.absorb(value);
        }

        self.sponge.finish_absorbing().squeeze()
    }
}

#[cfg(test)]
mod tests {
    use super::{permute, ConstantLength, Hash, P128Pow5T3 as OrchardNullifier, Spec};
    use ff::PrimeField;
    use halo2curves::pasta::pallas;

    #[test]
    fn orchard_spec_equivalence() {
        let message = [pallas::Base::from(6), pallas::Base::from(42)];

        let (round_constants, mds, _) = OrchardNullifier::constants();

        let hasher = Hash::<_, OrchardNullifier, ConstantLength<2>, 3, 2>::init();
        let result = hasher.hash(message);

        // The result should be equivalent to just directly applying the permutation and
        // taking the first state element as the output.
        let mut state = [message[0], message[1], pallas::Base::from_u128(2 << 64)];
        permute::<_, OrchardNullifier, 3, 2>(&mut state, &mds, &round_constants);
        assert_eq!(state[0], result);
    }
}
